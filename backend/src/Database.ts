//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { UserFilesEntity } from './db/UserFiles.entity';
import { ConversionFormatsEntity } from './db/ConversionFormats.entity';
import { ConversionTasksEntity } from './db/ConversionTasks.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UserFilesEntity,
      ConversionFormatsEntity,
      ConversionTasksEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      UserFiles: [
        {
          fileName: 'fileName 1',
          fileType: 'fileType 1',
          uploadDate: '2023-12-25T10:41:27.254Z',
          id: 46,
        },
        {
          fileName: 'fileName 2',
          fileType: 'fileType 2',
          uploadDate: '2023-05-23T21:18:57.802Z',
          id: 34,
        },
        {
          fileName: 'fileName 3',
          fileType: 'fileType 3',
          uploadDate: '2023-12-11T07:35:25.758Z',
          id: 83,
        },
        {
          fileName: 'fileName 4',
          fileType: 'fileType 4',
          uploadDate: '2023-09-25T03:25:13.288Z',
          id: 33,
        },
        {
          fileName: 'fileName 5',
          fileType: 'fileType 5',
          uploadDate: '2023-09-20T03:11:33.966Z',
          id: 24,
        },
      ],
      ConversionFormats: [
        {
          formatName: 'formatName 1',
          formatType: 'formatType 1',
          supportedFileTypes: 'supportedFileTypes 1',
          id: 74,
        },
        {
          formatName: 'formatName 2',
          formatType: 'formatType 2',
          supportedFileTypes: 'supportedFileTypes 2',
          id: 72,
        },
        {
          formatName: 'formatName 3',
          formatType: 'formatType 3',
          supportedFileTypes: 'supportedFileTypes 3',
          id: 69,
        },
        {
          formatName: 'formatName 4',
          formatType: 'formatType 4',
          supportedFileTypes: 'supportedFileTypes 4',
          id: 60,
        },
        {
          formatName: 'formatName 5',
          formatType: 'formatType 5',
          supportedFileTypes: 'supportedFileTypes 5',
          id: 15,
        },
      ],
      ConversionTasks: [
        {
          taskId: 1,
          sourceFileId: 1,
          targetFormat: 1,
          conversionStatus: 'conversionStatus 1',
          completionDate: '2023-07-08T03:22:21.350Z',
          id: 27,
        },
        {
          taskId: 2,
          sourceFileId: 2,
          targetFormat: 2,
          conversionStatus: 'conversionStatus 2',
          completionDate: '2025-01-26T22:04:20.770Z',
          id: 61,
        },
        {
          taskId: 3,
          sourceFileId: 3,
          targetFormat: 3,
          conversionStatus: 'conversionStatus 3',
          completionDate: '2023-05-19T05:34:40.026Z',
          id: 30,
        },
        {
          taskId: 4,
          sourceFileId: 4,
          targetFormat: 4,
          conversionStatus: 'conversionStatus 4',
          completionDate: '2024-06-22T10:58:15.726Z',
          id: 48,
        },
        {
          taskId: 5,
          sourceFileId: 5,
          targetFormat: 5,
          conversionStatus: 'conversionStatus 5',
          completionDate: '2024-06-22T14:18:03.300Z',
          id: 31,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('UserFilesEntity', data.UserFiles);
      await this.SeedResource(
        'ConversionFormatsEntity',
        data.ConversionFormats,
      );
      await this.SeedResource('ConversionTasksEntity', data.ConversionTasks);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
